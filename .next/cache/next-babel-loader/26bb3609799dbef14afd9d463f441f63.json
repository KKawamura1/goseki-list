{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { reducer as helloReducer } from './components/hello/state/slice';\nconst reducerWithoutHydrate = combineReducers({\n  hello: helloReducer\n});\n// Hydration with next-redux-wrapper\nexport const reducer = (state, action) => {\n  if (action.type == HYDRATE) {\n    const clientState = state == null ? {} : state;\n    const serverState = action.payload;\n    return _objectSpread(_objectSpread({}, clientState), serverState);\n  }\n\n  return reducerWithoutHydrate(state, action);\n}; // https://github.com/kirill-konshin/next-redux-wrapper#usage\n\nconst makeStore = context => configureStore({\n  reducer\n});\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n}); // https://github.com/kirill-konshin/next-redux-wrapper/issues/207#issuecomment-719038396\n// export type AppDispatch = ReturnType<typeof makeStore>['dispatch'];","map":{"version":3,"sources":["/Users/kkawamura/myroot/hobby/monhan/goseki_list/src/store.tsx"],"names":["combineReducers","createWrapper","HYDRATE","configureStore","reducer","helloReducer","reducerWithoutHydrate","hello","state","action","type","clientState","serverState","payload","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAAmCA,eAAnC,QAAuE,OAAvE;AACA,SAASC,aAAT,EAAiCC,OAAjC,QAAgD,oBAAhD;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,OAAO,IAAIC,YAApB,QAAwC,gCAAxC;AAGA,MAAMC,qBAAqB,GAAGN,eAAe,CAAC;AAC5CO,EAAAA,KAAK,EAAEF;AADqC,CAAD,CAA7C;AAKA;AACA,OAAO,MAAMD,OAAO,GAAG,CAACI,KAAD,EAA+BC,MAA/B,KAAgE;AACrF,MAAIA,MAAM,CAACC,IAAP,IAAeR,OAAnB,EAA4B;AAC1B,UAAMS,WAAW,GAAGH,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAAzC;AACA,UAAMI,WAAW,GAAGH,MAAM,CAACI,OAA3B;AACA,2CAAYF,WAAZ,GAA4BC,WAA5B;AACD;;AACD,SAAON,qBAAqB,CAACE,KAAD,EAAQC,MAAR,CAA5B;AACD,CAPM,C,CASP;;AACA,MAAMK,SAAS,GAAIC,OAAD,IAAsBZ,cAAc,CAAC;AAAEC,EAAAA;AAAF,CAAD,CAAtD;;AACA,OAAO,MAAMY,OAAO,GAAGf,aAAa,CAACa,SAAD,EAAY;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B,C,CAEP;AACA","sourcesContent":["import { AnyAction, CombinedState, combineReducers, createStore } from 'redux';\nimport { createWrapper, Context, HYDRATE } from 'next-redux-wrapper';\nimport { configureStore } from '@reduxjs/toolkit';\nimport thunk, { ThunkDispatch } from 'redux-thunk';\nimport { reducer as helloReducer } from './components/hello/state/slice';\nimport { Dispatch } from 'react';\n\nconst reducerWithoutHydrate = combineReducers({\n  hello: helloReducer,\n});\nexport type RootState = ReturnType<typeof reducerWithoutHydrate>;\n\n// Hydration with next-redux-wrapper\nexport const reducer = (state: RootState | undefined, action: AnyAction): RootState => {\n  if (action.type == HYDRATE) {\n    const clientState = state == null ? {} : state;\n    const serverState = action.payload;\n    return { ...clientState, ...serverState };\n  }\n  return reducerWithoutHydrate(state, action);\n};\n\n// https://github.com/kirill-konshin/next-redux-wrapper#usage\nconst makeStore = (context: Context) => configureStore({ reducer });\nexport const wrapper = createWrapper(makeStore, { debug: true });\n\n// https://github.com/kirill-konshin/next-redux-wrapper/issues/207#issuecomment-719038396\n// export type AppDispatch = ReturnType<typeof makeStore>['dispatch'];\nexport type AppDispatch = ThunkDispatch<RootState, null | undefined, AnyAction> &\n  Dispatch<AnyAction>;\n\n// https://qiita.com/Takepepe/items/6addcb1b0facb8c6ff1f#ambient-module-%E5%AE%A3%E8%A8%80%E3%81%A7-overload-%E3%81%99%E3%82%8B\ndeclare module 'react-redux' {\n  interface DefaultRootState extends RootState {}\n}\n"]},"metadata":{},"sourceType":"module"}